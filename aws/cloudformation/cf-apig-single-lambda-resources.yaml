AWSTemplateFormatVersion: '2010-09-09'

Description: CloudFront > APIG > Single Labmda.  
  Naming convention, [stage]--[repo]--[branch]--[eyecatcher]--r
  SSL only, custom DomainName, custom header to verify requests come through CloudFront, Edge Gzip, Caching OPTIONS

Parameters:

  AcmCertificateArn:
    Description: The ARN of a certificate from AWS Certificate Manager (ACM)
    Default: arn:aws:acm:us-east-1:111:certificate/1111-2a50-4e70-b9f0-8f71585ce17b
    Type: String

  LambdaName:
    Description: Lambda function name (should not exist when creating test, will when creating production/staging).  This value will be prepended with [Repo]--[Branch]--
    Type: String
    Default: YourLambdaNameHere

  CloudFrontCname:
    Description: Custom domain name to use (foo.yourdomain.com).  Will prefix this with stageName--
    Type: String
    Default: api.yourdomain.com
    MaxLength: 253
    MinLength: 5
    AllowedPattern: "^((?!-)[a-zA-Z0-9-]{1,63}(?<!-)\\.){2}[a-zA-Z]{2,63}$"
    ConstraintDescription: must be a FQDN with 3 parts, ex. api.yourdomain.com 

  VerifyFromCfHeaderVal:
    Description: A custom header X-From-CDN with val below be passed to your orgin, to verify request came 
    Type: String
    Default: fromCf

  NestedStacksS3Bucket:
    Description: The name of the versioned S3 bucket you created to hold nested stack temlpates
    Type: String
    Default: us-east-1--aws-blueprint.yourdomain.com

Conditions: 
  CreateStagingResources: !Equals [ !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], prod ]

Mappings: 
  NestedStacks: 
    infrastructure: 
      "singleLambdaProxyWithCORS": "apig/single-lambda-proxy-with-CORS.yaml?versionid=YourS3VersionId"
      "singleApigCustomDomain": "cloudfront/single-apig-custom-domain.yaml?versionid=YourS3VersionId"    
      
Resources:  
##### Lambda
  LambdaExecutionRole: #Use same role for staging and production
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]        
      Path: /
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - "s3:*"
                Effect: Allow
                Resource:
                  - !GetAtt MyS3Bucket.Arn
                  - !Sub 
                    - "${bucketArn}*"
                    - { bucketArn: !GetAtt MyS3Bucket.Arn }     
##### End Lambda

####S3
  MyS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: 'Delete' #TODO: https://forums.aws.amazon.com/post!post.jspa?forumID=92&threadID=152800&messageID=859017&reply=true  
    Properties:
      BucketName: !Sub 
        - ${AWS::Region}--${Stage}--${Branch}--data.yourdomain.com
        - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ] }
      # ReplicationConfiguration:
      #   Role: !GetAtt [WorkItemBucketBackupRole, Arn]
      #   Rules:
      #   - Destination:
      #       Bucket: !Join ['', ['arn:aws:s3:::', !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName',
      #               replicationbucket]]]]
      #       StorageClass: STANDARD
      #     Id: Backup
      #     Prefix: ''
      #     Status: Enabled
      VersioningConfiguration:
        Status: Enabled
####End S3

##### API Gateway
  ApiGatewayLambdaProxy: 
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 
        - https://s3.${AWS::Region}.amazonaws.com/${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, singleLambdaProxyWithCORS] }
      Parameters:
        Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ]
        Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ]
        Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]
        LambdaName: !Ref LambdaName

  ApiGatewayLambdaProxyStaging: 
    Type: 'AWS::CloudFormation::Stack'
    Condition: CreateStagingResources
    Properties:
      TemplateURL: !Sub 
        - https://s3.${AWS::Region}.amazonaws.com/${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, singleLambdaProxyWithCORS] }
      Parameters:
        Stage: staging
        Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ]
        Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]
        LambdaName: !Ref LambdaName        
##### END API Gateway

#### Cloudfront and DNS stuff
  CloudFront:  
    Type: 'AWS::CloudFormation::Stack'
    DependsOn: ApiGatewayLambdaProxy
    Properties:
      TemplateURL: !Sub 
        - https://s3.${AWS::Region}.amazonaws.com/${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, singleApigCustomDomain] }

      Parameters:
        Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ]
        ApiGatewayId: !GetAtt ApiGatewayLambdaProxy.Outputs.APIGID
        AcmCertificateArn: !Ref AcmCertificateArn
        Route53HostedZoneId: Z2FDTNDATAQYW2
        CloudFrontCname: !Ref CloudFrontCname
        VerifyFromCfHeaderVal: !Ref VerifyFromCfHeaderVal

  CloudFrontStaging:  
    Type: 'AWS::CloudFormation::Stack'
    Condition: CreateStagingResources
    DependsOn: ApiGatewayLambdaProxyStaging
    Properties:
      TemplateURL: !Sub 
        - https://s3.${AWS::Region}.amazonaws.com/${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, singleApigCustomDomain] }

      Parameters:
        Stage: staging
        ApiGatewayId: !GetAtt ApiGatewayLambdaProxyStaging.Outputs.APIGID
        AcmCertificateArn: !Ref AcmCertificateArn
        Route53HostedZoneId: Z2FDTNDATAQYW2
        CloudFrontCname: !Ref CloudFrontCname
        VerifyFromCfHeaderVal: !Ref VerifyFromCfHeaderVal
   
####END Cloudfront and DNS stuff  

Outputs:
  Version:
    Description: CF-APIG-Single-Lambda template version
    Value: 1.0.0

  CloudFront:
    Description: CloudFront ID
    Value: !GetAtt CloudFront.Outputs.CloudFront
  CNAME:
    Description: Custom domain for Cloudfront
    Value: !GetAtt CloudFront.Outputs.CNAME

  APIGID:
    Description: APIG root resource ID
    Value: !GetAtt ApiGatewayLambdaProxy.Outputs.APIGID
  APIGURL:
    Description: APIG stage URL
    Value: !GetAtt ApiGatewayLambdaProxy.Outputs.APIGURL
  APIGLambdaInvocationArn:
    Description: ARN of lambda that will be called from APIG
    Value: !GetAtt ApiGatewayLambdaProxy.Outputs.APIGLambdaInvocationArn  

  LambdaExecutionRoleArn:
    Description: Lambda execution role
    Value: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}

  FullLambdaName:
    Description: Full lambda name
    Value: !Sub
      - ${Repo}--${Branch}--${LambdaName}
      - { LambdaName: !Ref LambdaName, Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ] }          

  RunSsmSetLambdaExecutionRoleCmd:
    Description: SSM command to setup lambda execution role.  Staging will use the prod value of this key
    Value: !Sub 
      - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaExecutionRoleArn' --type 'String' --value 'arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}'
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}
  
  RunSsmSetXFromCdnEnvVarCmd:
    Description: SSM command to set X_FROM_CDN env var
    Value: !Sub 
      - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaEnvs/X_FROM_CDN' --type 'String' --value '${VerifyFromCfHeaderVal}'
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}

  RunSsmSetLambdaMemory:
    Description: SSM command to define lambda memory
    Value: !Sub 
      - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaMemory' --type 'String' --value 'yourMemoryHere'
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          

  RunSsmSetLambdaTimeoutKey:
    Description: SSM command to define lambda timeout
    Value: !Sub 
      - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaTimeout' --type 'String' --value 'yourTimeoutHere'
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          

  SSMEnvVarsPath:
    Description: SSM prefix where env vars should be defined
    Value: !Sub 
      - /${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaEnvs
      - { Stage: !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          

  #staging output
  CloudFrontStaging:
    Description: Staging CloudFront ID
    Value: !If [CreateStagingResources, !GetAtt CloudFrontStaging.Outputs.CloudFront, NA]
  CNAMEStaging:
    Description: Staging Custom domain for Cloudfront
    Value: !If [CreateStagingResources, !GetAtt CloudFrontStaging.Outputs.CNAME, NA]

  APIGIDStaging:
    Description: APIG root resource ID
    Value: !If [CreateStagingResources, !GetAtt ApiGatewayLambdaProxyStaging.Outputs.APIGID, NA]
  APIGURLStaging:
    Description: APIG stage URL
    Value: !If [CreateStagingResources, !GetAtt ApiGatewayLambdaProxyStaging.Outputs.APIGURL, NA]
  APIGLambdaInvocationArnStaging:
    Description: ARN of lambda that will be called from APIG
    Value: !If [CreateStagingResources, !GetAtt ApiGatewayLambdaProxyStaging.Outputs.APIGLambdaInvocationArn, NA]

  RunSsmSetLambdaMemoryStaging:
    Description: SSM command to define lambda memory
    Value: !If 
      - CreateStagingResources
      - 
        !Sub 
        - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaMemory' --type 'String' --value 'yourMemoryHere'
        - { Stage: 'staging', Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}          
      - NA        

  RunSsmSetLambdaTimeoutKeyStaging:
    Description: SSM command to define lambda timeout
    Value: !If 
      - CreateStagingResources
      - 
        !Sub 
        - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaTimeout' --type 'String' --value 'yourTimeoutHere'
        - { Stage: 'staging', Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}    
      - NA

  SSMEnvVarsPathStaging:
    Description: staging SSM prefix where env vars should be defined
    Value: !If 
      - CreateStagingResources
      - 
        !Sub 
        - /staging/${Repo}/${Branch}/${LambdaName}/lambdaEnvs
        - { Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}                
      - NA

  RunSsmSetXFromCdnEnvVarCmdStaging:
    Description: SSM command to set X_FROM_CDN env var for staging
    Value: !If 
      - CreateStagingResources
      - 
        !Sub
        - aws ssm put-parameter --overwrite --name '/${Stage}/${Repo}/${Branch}/${LambdaName}/lambdaEnvs/X_FROM_CDN' --type 'String' --value '${VerifyFromCfHeaderVal}'
        - { Stage: 'staging', Repo: !Select [ "1", !Split [ '--', !Ref 'AWS::StackName' ] ], Branch: !Select [ "2", !Split [ '--', !Ref 'AWS::StackName' ] ]}      
      - NA        
  #end staging output         
